{"version":3,"sources":["../src/datasource.js"],"names":["_","TimelionDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","esVersion","basicAuth","length","options","datasourceRequest","query","buildQueryParameters","oThis","targets","when","data","reqs","map","queries","request","method","then","readTimelionSeries","response","list","ix","target","label","datapoints","d","all","flatten","series","time","from","to","interval","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","parseTimelionFunctions","i","text","value","isObject","filter","timelion_exp","hide","queryTpl","sheet","timezone","format","utc","mode","timelion_expressions","tl_regex","query_list","m","queryInterpolated","t","scopedVars","exec","index","lastIndex","forEach","match","groupIndex","scale_interval","push","cloneDeep","s"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class TimelionDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.instanceSettings = instanceSettings;\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n      'Content-Type': 'application/json',\n      'kbn-version': this.instanceSettings.esVersion || '5.3.2',\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  request(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    const oThis = this;\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n    const reqs = _.map(options.queries, query =>\n      oThis\n        .request({\n          url: this.url + '/run',\n          data: query,\n          method: 'POST',\n        })\n        .then(response =>\n          TimelionDatasource.readTimelionSeries(response).map((list, ix) => ({\n            target: list.label,\n            datapoints: _.map(list.data, d => [d[1], d[0]]),\n          })),\n        ),\n    );\n    return this.q.all(reqs).then(series => ({ data: _.flatten(series) }));\n  }\n\n  static readTimelionSeries(response) {\n    return _.flatten(_.map(response.data.sheet, s => s.list));\n  }\n\n  testDatasource() {\n    return this.request({\n      url: this.url + '/run',\n      data: { time: { from: 'now-1s', to: 'now', interval: '1s' } },\n      method: 'POST',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    const query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    const annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query,\n      },\n      rangeRaw: options.rangeRaw,\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + '/annotations',\n        method: 'POST',\n        data: annotationQuery,\n      })\n      .then(result => {\n        return result.data;\n      });\n  }\n\n  metricFindQuery(query) {\n    const interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex'),\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: 'https://raw.githubusercontent.com/elastic/timelion/master/FUNCTIONS.md',\n        method: 'GET',\n      })\n      .then(this.parseTimelionFunctions);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder timelion_expressions\n    options.targets = _.filter(options.targets, target => {\n      return target.timelion_exp !== 'select metric' && !target.hide;\n    });\n\n    const queryTpl = {\n      sheet: null,\n      time: {\n        timezone: options.range.from.format('ZZ'),\n        from: options.range.from.utc().format('YYYY-MM-DDTHH:mm:ss.SSSZ'),\n        interval: null,\n        mode: 'absolute',\n        to: options.range.to.utc().format('YYYY-MM-DDTHH:mm:ss.SSSZ'),\n      },\n    };\n\n    const timelion_expressions = _.flatten(\n      _.map(options.targets, t => {\n        const tl_regex = /(?:\\.\\w+\\((?:\\((?:\\((?:\\(.*?\\)|\".*?\"|.*?)*?\\)|\".*?\"|.*?)*?\\)|\".*?\"|.*?)*?\\))+/g;\n        const query_list = [];\n        let m;\n\n        const queryInterpolated = this.templateSrv.replace(t.timelion_exp, options.scopedVars, 'lucene');\n        while ((m = tl_regex.exec(queryInterpolated)) !== null) {\n          if (m.index === tl_regex.lastIndex) {\n            tl_regex.lastIndex++;\n          }\n\n          m.forEach((match, groupIndex) => {\n            const query = { match: match, interval: 'auto' };\n\n            const scale_interval = /(?:\\.scale_interval\\()([\\w\"]+)\\)/.exec(match);\n            if (scale_interval) {\n              query.match = match.replace(scale_interval[0], '');\n              query.interval = scale_interval[1];\n            }\n            query_list.push(query);\n          });\n        }\n\n        return query_list;\n      }),\n    );\n\n    options.queries = _.map(timelion_expressions, q => {\n      queryTpl.sheet = [q.match];\n      queryTpl.time.interval = q.interval;\n      return _.cloneDeep(queryTpl);\n    });\n\n    return options;\n  }\n}\n"]}